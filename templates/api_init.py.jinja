""" Contains methods for accessing the API """
from __future__ import annotations

from typing import List, Type
import importlib

from binarylane.console.runners.module import ModuleRunner

__all__ = ['commands']
commands : List[Type[ModuleRunner]] = []

def register_command(cls: Type[ModuleRunner]) -> Type[ModuleRunner]:
    commands.append(cls)
    return cls

{% set _ = openapi.__setattr__('endpoints_by_name', {}) %}
{% for key, value in endpoint_collections_by_tag | dictsort %}
{% for endpoint in value.endpoints if endpoint.data['x-cli-command'] %}
{% set _ = openapi.endpoints_by_name.__setitem__(endpoint.data['x-cli-command'], endpoint) %}
@register_command
class {{ class_name(endpoint.name) }}(ModuleRunner):
    @property
    def name(self) -> str:
        return '{{ endpoint.data['x-cli-command'] }}'

    @property
    def description(self) -> str:
        return '{{ endpoint.summary }}'

    @property
    def module_path(self) -> str:
        return '.commands.{{ key }}.{{ python_identifier(endpoint.name) }}'

{% endfor %}
{% endfor %}
