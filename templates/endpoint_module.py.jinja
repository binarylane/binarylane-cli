from __future__ import annotations

{# BEGIN: manual mapping of parameters to lookup operations #}
{% set lookup_map = {
    "server_id": "server list",
} %}
{% set entity_map = {
    "server list": {"id": "id", "ref": "name"},
} %}
{% for parameter_name in lookup_map %}
{% for param in (endpoint.data.parameters or []) if param.param_in == "path" and param.name == parameter_name %}
{% set _ = param.__setattr__("x-cli-lookup", lookup_map[parameter_name]) %}
{% endfor %}
{% endfor %}
{% for command_name in entity_map %}
{% if endpoint.data["x-cli-command"] == command_name %}
{% set _ = endpoint.data.__setattr__("x-cli-entity", entity_map[command_name]) %}
{% endif %}
{% endfor %}
{# ENDOF: manual mapping of parameters to lookup operations #}

{% if endpoint.json_body and endpoint.json_body.template.startswith('union_') %}
{# endpoint_init.py.jinja has same check and will not generate a ModuleRunner #}
# json_body unions are not implmemented
# Type: {{ endpoint.json_body.get_instance_type_string() }}

{% else %}
{% include "endpoint_module/imports.jinja" %}

{#
Included Jinja templates can mutate existing variables, but cannot set new values -
i.e. templates act like python functions, with `set` being a local variable assignment.

For that reason, we `set` variables needed later prior to include and the included
template will mutate that object, allowing access to the modified object after the
included template is finished.
#}

{% set response_class = {'name': 'CommandRunner'} %}
{% include "endpoint_module/response_class.jinja" %}

{% set req_parameters=[] %}
{% set opt_parameters=[] %}
{% include "endpoint_module/command_request.jinja" %}


class Command({{ response_class['name'] }}):
{% if response_class.get('list') %}
{% include "endpoint_module/list_runner.jinja" %}
{% endif %}

    @property
    def reference_url(self) -> str:
        return "https://api.binarylane.com.au/reference/#tag/{{ endpoint.data["tags"][0] }}/paths/{{ endpoint.path.replace("/","~1").replace("{","%7B").replace("}","%7D") }}/{{ endpoint.method }}"

{% include "endpoint_module/create_mapping.jinja" %}

    @property
    def ok_response_type(self) -> type:
        {% if 'type' in response_class %}
        return {{ response_class['type'].get_type_string() }}
        {% else %}
        return type(None)
        {% endif %}

{% include "endpoint_module/request.jinja" %}

{% endif %}
