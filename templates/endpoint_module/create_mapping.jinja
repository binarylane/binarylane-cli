    def create_mapping(self) -> Mapping:
        mapping = Mapping(CommandRequest)
        {% if (req_parameters + opt_parameters) %}
        {% macro description_argument(prop) %}{% if prop.description %}description="""{{ prop.description.replace("    ","") }}""",{% endif %}{% endmacro %}
        {% macro option_name(prop) %}option_name = "{{ prop.name.replace('_','-') }}",{% endmacro %}

        {% for property in endpoint.path_parameters.values() %}

        {# Check if parameter has a lookup command, and define handler if it does #}
        {% set lookup_command = [] %}
        {% for param in endpoint.data.parameters if param.param_in == 'path' and property.name == param.name and param['x-cli-lookup'] %}
        {% set lookup_endpoint = openapi.endpoints_by_name.get(param['x-cli-lookup']) %}
        {% if not lookup_endpoint %}
        {{ fail('lookup command not found', param['x-cli-lookup']) }}
        {% endif %}
        {% set _ = lookup_command.append(param['x-cli-lookup']) %}
        def _lookup_{{ property.python_name }}(value: str) -> Union[None, {{ property.get_type_string() }}]:
            return api_{{ python_identifier(lookup_endpoint.name) }}.Command(self._context).lookup(value)
        {% endfor %}

        mapping.add_primitive(
            "{{ property.python_name }}",
            {{ property.get_type_string() }},
            required = True,
            option_name = None,
            {{ description_argument(property) }}
            {% if lookup_command %} lookup = _lookup_{{ property.python_name }}, {% endif %}
            )
        {% endfor %}

        {% if endpoint.json_body %}
        {#
            FIXME: BL API is not supposed to have any of these, but currently failover-ip update uses it.
        #}
        {% if endpoint.json_body.get_instance_type_string() == 'list' %}
        mapping.add_primitive(
            "{{ endpoint.tag }}",
            {{ endpoint.json_body.get_type_string() }},
            option_name='value',
            required = True,
            {{ description_argument(endpoint.json_body) }}
            warning="request body is {{ endpoint.json_body.get_type_string() }}",
            )

        {% elif endpoint.json_body.class_info %}

        {% macro add_object_to_parser(parser, prop) %}
        {% for property in prop.required_properties + prop.optional_properties %}
        {% if property.get_instance_type_string() == "list" and property.inner_property.class_info in openapi.models_by_class %}
        {% set subparser = parser + "_" + property.inner_property.class_info.module_name %}

        {{ subparser }} = {{ parser }}.add(ListAttribute(
            "{{ property.python_name }}",
            {{ property.inner_property.get_type_string(no_optional=True) }},
            {{ option_name(property) }}
            {{ description_argument(property) }}
            required = {{ property.required }},
        ))
        {{ add_object_to_parser(subparser, openapi.models_by_class[property.inner_property.class_info]) }}
        {% elif property.class_info in openapi.models_by_class %}
        {% set subparser = parser + "_" + property.class_info.module_name %}

        {{ subparser }} = {{ parser }}.add(ObjectAttribute(
            "{{ property.python_name }}",
            {{ property.get_type_string(no_optional=True) }},
            {{ option_name(property) }}
            required = {{ property.required }},
            {{ description_argument(prop.data.properties[property.name]) }}
        ))
        {{ add_object_to_parser(subparser, openapi.models_by_class[property.class_info]) }}
        {% else %}

        {{ parser }}.add_primitive(
            "{{  property.python_name }}",
            {{ property.get_type_string() }},
            {{ option_name(property) }}
            required={{ property.required }},
            {{ description_argument(property) }}
        )
        {% endif %}
        {% endfor %}
        {% endmacro %}

        json_body = mapping.add_json_body({{ endpoint.json_body.get_type_string() }})
        {{ add_object_to_parser('json_body', endpoint.json_body) }}

        {% else %}
        # Unknown {{ endpoint.json_body.get_instance_type_string() }} {{ endpoint.json_body.template }}
        {% endif %}
        {% endif %}

        {% if endpoint.query_parameters %}
        {% for property in endpoint.query_parameters.values() if property.name not in ('page', 'per_page') %}
        mapping.add_primitive(
                "{{ property.python_name }}",
                {{ property.get_type_string() }},
                required={{ property.required }},
                {{ option_name(property) }}
                {{ description_argument(property) }}
                )
        {% endfor %}
        {% endif %}
        {% endif %}
        return mapping
