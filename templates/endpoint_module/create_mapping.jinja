{% import "endpoint_module/attributes.jinja" as attributes with context %}
    def create_mapping(self) -> Mapping:
        mapping = Mapping(CommandRequest)
        {% if (req_parameters + opt_parameters) %}

        {% for property in endpoint.path_parameters.values() %}
        {{ attributes.add_lookup(property) }}
        {% endfor %}
        {% for property in endpoint.path_parameters.values() %}
        mapping.{{ attributes.add_primitive(property, True) }}
        {% endfor %}

        {% if endpoint.json_body %}
        {% if endpoint.json_body.get_instance_type_string() == 'list' %}
        {{ unsupported('json_body cannot be a list') }}

        {% elif endpoint.json_body.class_info %}
        {% macro add_object_to_parser(parser, prop) %}
        {% for property in prop.required_properties + prop.optional_properties %}
        {% if property.get_instance_type_string() == "list" and property.inner_property.class_info in openapi.models_by_class %}
        {% set subparser = parser + "_" + property.inner_property.class_info.module_name %}

        {{ subparser }} = {{ parser }}.{{ attributes.add_list(property) }}
        {{ add_object_to_parser(subparser, openapi.models_by_class[property.inner_property.class_info]) }}
        {% elif property.class_info in openapi.models_by_class %}
        {% set subparser = parser + "_" + property.class_info.module_name %}

        {{ subparser }} = {{ parser }}.{{ attributes.add_object(property, prop.data.properties[property.name]) }}
        {{ add_object_to_parser(subparser, openapi.models_by_class[property.class_info]) }}
        {% else %}

        {{ attributes.add_lookup(property) }}
        {{ parser }}.{{ attributes.add_primitive(property) }}
        {% endif %}
        {% endfor %}
        {% endmacro %}

        json_body = mapping.add_json_body({{ endpoint.json_body.get_type_string() }})
        {{ add_object_to_parser('json_body', endpoint.json_body) }}

        {% else %}
        # Unknown {{ endpoint.json_body.get_instance_type_string() }} {{ endpoint.json_body.template }}
        {% endif %}
        {% endif %}

        {% if endpoint.query_parameters %}
        {% for property in endpoint.query_parameters.values() if property.name not in ('page', 'per_page') %}
        mapping.{{ attributes.add_primitive(property) }}
        {% endfor %}
        {% endif %}
        {% endif %}
        return mapping
