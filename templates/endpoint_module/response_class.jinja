{% set return_string = endpoint.response_type() %}
{% set parsed_responses = (endpoint.responses | length > 0) and return_string != "Any" %}
{% for response_type in endpoint.responses if response_type.status_code == 200 %}
{% set _ = response_class.update({'type': response_type.prop}) %}
{% if endpoint.method != 'get' and response_type.prop.class_info and response_type.prop.class_info.name == 'ActionResponse' %}
{% set _ = response_class.update({'name': 'ActionRunner'}) %}
{% endif %}
{% for prop in response_type.prop.required_properties if prop.name == 'links' and prop.class_info.name == 'ActionsLinks' %}
{% set _ = response_class.update({'name': 'ActionLinkRunner'}) %}
{% endfor %}
{# Check if response contains a list[Model] property; and store it for later #}
{% for prop in response_type.prop.required_properties if prop.name not in ('meta', 'links') and prop.get_instance_type_string() == 'list' and prop.inner_property.class_info %}
{% set _ = response_class.update({'name': 'ListRunner', 'list': openapi.models_by_class[prop.inner_property.class_info], 'property': prop}) %}
{% endfor %}
{# Second check if there are any non-list values, which means this isnt a list response #}
{% for prop in response_type.prop.required_properties if response_class.get('list') and prop.name not in ('meta', 'links') and prop.get_instance_type_string() != 'list' %}
{# This is required because of jinja 'for' variable scope #}
{% set _ = response_class.update({'name': 'CommandRunner', 'list': None, 'property': None}) %}
{% endfor %}
{% endfor %}

from binarylane.console.runners.{{ response_class['name'].lower().replace('runner', '') }} import {{ response_class['name'] }}

{# Import any command runners required to perform lookups #}
{% for property in endpoint.path_parameters.values() %}
{% for param in endpoint.data.parameters if param.param_in == 'path' and property.name == param.name and param['x-cli-lookup'] %}
{% set lookup_endpoint = openapi.endpoints_by_name.get(param['x-cli-lookup']) %}
{% if not lookup_endpoint %}
{{ fail('lookup command not found', param['x-cli-lookup']) }}
{% endif %}
import binarylane.console.commands.api.{{ python_identifier(lookup_endpoint.name) }} as api_{{ python_identifier(lookup_endpoint.name) }}
{% endfor %}
{% endfor %}
